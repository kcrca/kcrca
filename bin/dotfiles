#!/bin/bash
############################
# .make.sh
# This script creates symlinks from the home directory to any desired dotfiles in ~/kcrca/dotfiles
############################

########## Variables

dir=~/kcrca/dotfiles                    # dotfiles directory
olddir=~/.bak             # old dotfiles backup directory

function dotfilebak() {
    echo .$1
}

function binfilebak() {
    echo $1
}

function linkup() {
    srcdir="$1"
    tgtdir="$2"
    bakdir="$3"
    tgtfilefunc="$4"

    # create $olddir in homedir
    if [ ! -d $bakdir ]; then
	echo "Creating $bakdir for backup of any existing dotfiles in $srcdir ..."
	test -z $debug && mkdir -p $bakdir
    fi

    # move any existing dotfiles in homedir to $bakdir directory, then create symlinks from the homedir to any files in the ~/dotfiles directory
    cd $srcdir
    for file in *; do
	tgtbase=`eval $tgtfilefunc $file`
	tgt=$tgtdir/$tgtbase
	if [ -L $tgt ]; then
	    test -z $debug && rm $tgt
	elif [ -f $tgt -o -d $tgt ]; then
	    echo Move $tgt to $bakdir
	    test -z $debug && rm -rf $bakdir/$tgtbase
	    test -z $debug && mv $tgt $bakdir
	fi
	echo "Linking $srcdir/$file to $tgt"
	test -z $debug && ln -s $srcdir/$file $tgt
    done
}

linkup ~/kcrca/dotfiles ~ ~/.bak dotfilebak
linkup ~/kcrca/bin ~/bin ~/.bak/bin binfilebak

install_zsh () {
# Test to see if zshell is installed.  If it is:
if [ ! -f /bin/zsh -a ! -f /usr/bin/zsh ]; then
    # If zsh isn't installed, get the platform of the current machine
    platform=$(uname);
    # If the platform is Linux, try an apt-get to install zsh and then recurse
    if [[ $platform == 'Linux' ]]; then
        sudo apt-get install zsh
        install_zsh
    # If the platform is OS X, tell the user to install zsh :)
    elif [[ $platform == 'Darwin' ]]; then
        echo "Please install zsh, then re-run this script!"
        exit
    fi
fi
}

install_zsh
