#!/bin/zsh
# Check for unwritten vim swap files

while getopts rv flag; do
    case "$flag" in
    v) verbose=1;;
    r) recurse=1;;
    ?) exit;;
    esac
done
shift $(( OPTIND - 1 ))

#
# (1) find directories with .swp files in them
#
dirs=("${@:-.}")
if (( recurse )); then
    swps=(`find $dirs -name '.*.swp' | while read fn; do dirname "$fn"; done | sort -u`)
else
    swps=($dirs)
fi

#
# (2) look in there for unwritten files that have at least two chars (because single
# char filenames are usualy used for scratch files)
#

top=${1:-$PWD}
typeset -U -a modified

# find older-style swp files that are co-located with files
for dir in $swps; do
    if (( verbose )); then
	echo Checking $dir
    fi
    modified+=($(cd $dir && vi -r |& awk '
	    BEGIN { in_current = 0 }
	    /In current directory:/ { in_current = 1 }
	    in_current && /file name: (.*)/ { file = $3; sub("\\s*$", "", file) }
	    in_current && /modified: YES/ { if (length(file) > 1) { printf("%s ", file) } }
	    /In directory/ { in_current = 0 }
	'))
done
# Newer-style swaps are in a single place based on the path
rdirs=()
for f in $swps; do
    rdirs+=(`realpath $f`)
done
epat="$rdirs"
epat="${epat:gs,.,\\.}"
epat="^(${epat:gs, ,|})"
files=($(vi -r |& awk '
            /file name: / { file=$3; sub("\\s*$", "", file) }
	    /modified: YES/ { print(file) }
	'))
files=(${~files})
for d in $rdirs; do
    modified+=(${(M)files:#$d/*})
done

if (( $#modified > 0 )); then
    echo '***' Unwritten files:
    eval print -c $modified
    #echo $modified | tr ' ' '\n' | sed -e 's/^/  /'
fi
exit $#modified
