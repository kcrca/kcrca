bindkey -v			# vi

export FCEDIT=vi		# Default editor for the fc command

HISTSIZE=300
SAVEHIST=300
HISTCHARS=!,#
HISTFILE=~/.zsh_history
HIST_EXPIRE_DUPS_FIRST=1
setopt HIST_ALLOW_CLOBBER	# in history, ">" becomes ">!"

FIGNORE='~:.bak:.o:CVS'		# Ignore during file completion

# Remember the top-most shell level that has a prompt (expected this to always
# be 1, but on the mac it's 2, counting the login program itself I think).
export TOPSHLVL=${TOPSHLVL:-$SHLVL}

build_prompt() {
    # The right-side prompt format is :user@host[vcs_info]:

    # If the user is known/expected, "user@" is ommitted
    local user
    if [[ $USER != arnold && $USER != root && $USER != kcrca ]]; then
	user="%U%n%u@"
    fi

    # If there is no useful vcs info, "[vcs_info]" is ommited
    local vcs_info
    if [[ -n $VIRTUAL_ENV ]]; then
	vcs_info="["`basename $VIRTUAL_ENV`"]"
    fi
    vcs_info
    if [[ $vcs_info_msg_0_ != "" ]]; then
	# Remove a trailing slash, which means "no branch"
	vcs_info="${vcs_info}[${vcs_info_msg_0_%/}]"
    fi

    # Build up a pre-command prompt based on SHLVL
    local lcnt=$((TOPSHLVL - SHLVL))
    PROMPT="%h%(!. #.>) "
    PROMPT=${PROMPT:F:$lcnt:s,>,>>}
    PROMPT=${PROMPT:F:$lcnt:s,#,##}
    RPROMPT="%(0?..%S***%s ):$user%m%B$vcs_info%b:"
}

autoload -Uz vcs_info
zstyle ':vcs_info:*' formats '%r/%b'
zstyle ':vcs_info:*' actionformats '%r/%b'

#left here for debugging
#zstyle ':vcs_info:*' actionformats 's:%s, b:%b, a:%a, i:%i, c:%c, u:%u, R:%R, r:%r, S:%S, m:%m'
#zstyle ':vcs_info:*'       formats 's:%s, b:%b, i:%i, c:%c, u:%u, R:%R, r:%r, S:%S, m:%m'
#zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'

build_prompt

typeset -aU preexec_functions precmd_functions
typeset -a last_cmd

# Remember the command being run. We can't use fc to figure it out later
# because of job control -- we don't want to report "fg" as "fg" but as the
# command it ran.
function cmd_notify_func_pre() {
    last_cmd=("${(z@)1}")             # Re-parse the command line
    cmd_notify_checked=0

    case $last_cmd[1] in
    fg|bg|job|%*)
	# Look up the command that is being managed by fg, etc.
	if [[ $last_cmd[1] == 'fg' ]]; then
	    if (( $#last_cmd == 1 )); then
		jobspec="%+"
	    else
		jobspec=$last_cmd[2]
	    fi
	else
	    jobspec=$last_cmd[2]
	fi

	# use jobs to translate jobspec (e.g. "%+") into a number
	local jobline jobnum cmd_text
	jobline=(`jobs $jobspec 2>& /dev/null`)
	if [[ ! -z $jobline ]]; then
	    jobnum=$jobline[1]		# jobnum is now (say) "[12]"
	    jobnum=${jobnum[2,-2]}	# jobnum is now (say) "12"
	    cmd_text=$jobtexts[$jobnum]
	    last_cmd=("${(z@)cmd_text}")
	fi
	;;
    *)
	;;	# do not need to look up the command
    esac
}

# If something takes at least :cmd_notify:notify-time seconds and is not in the
# foreground shell, notify the user
function cmd_notify_func() {
    st=$?
    (( cmd_notify_checked )) && return

    hist=(`fc -l -D -n -1 -1`)
    tm=$hist[1]:s/://

    zstyle -s ':cmd_notify:' notify-time notify
    if [[ $tm != "" ]] && (( $tm >= $notify )); then
	# cmd_notify checks for frontmost window, etc.
	cmd_notify $tm $st "$last_cmd[@]" &!
    fi
    cmd_notify_checked=1
}

if which cmd_notify >&/dev/null ; then
    preexec_functions+=(cmd_notify_func_pre)
    precmd_functions+=(cmd_notify_func)
else
    # this construct removes instances of (say) cmd_notify_func_pre from the array
    precmd_functions=("${(@)precmd_functions:#cmd_notify_func_pre}")
    preexec_functions=("${(@)preexec_functions:#cmd_notify_func}")
fi

precmd_functions+=(build_prompt)

chdir $PWD	# force the change_header (and make it right)

stty intr '^C' erase '^?' kill '^U' quit '^\\' eof '^D' susp '^Z' lnext '^V' stop '^S' start '^Q'
stty -a | grep -q dsusp && stty dsusp '^Y'

# virtualenv for python development
export WORKON_HOME=$HOME/.virtualenvs
test -f /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh && source /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh

# My custom stuff to update the prompt on virtualenv change

test -f /etc/bash_completion.d/g4d && source /etc/bash_completion.d/g4d

# The following lines were added by compinstall

zstyle ':completion:*' completer _complete _ignored
zstyle :compinstall filename ~/.zshrc

autoload -Uz compinit
compinit -u
which bashcompinit >/dev/null && bashcompinit
# End of lines added by compinstall

# Quote URL's on the command line automatically
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# cdr command to remember chdir stack between sessions
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs

# This is my version of cdr, which also accepts "cd foo" and looks for a dir
# named "foo" in the directory list, or -g and looks for a regexp (grep)
cdr () {
	emulate -L zsh
	setopt extendedglob
	autoload -Uz chpwd_recent_filehandler chpwd_recent_add
	integer list set_reply i bad edit grep
	local opt dir
	local -aU dirs
	while getopts "elrg" opt
	do
		case $opt in
			(e) edit=1  ;;
			(l) list=1  ;;
			(r) set_reply=1  ;;
			(g) grep=1 ;;
			(*) return 1 ;;
		esac
	done
	shift $(( OPTIND - 1 ))
	if (( set_reply ))
	then
		typeset -ga reply
	else
		local -a reply
	fi
	if (( list || set_reply || edit ))
	then
		(( $# )) && bad=1 
	else
		if [[ $#1 -eq 0 ]]
		then
			1=1 
		elif [[ $# -ne 1 || $1 != <-> ]]
		then
			if zstyle -t ':chpwd:' recent-dirs-default
			then
				cd "$@" return
			fi
		fi
	fi
	if (( bad ))
	then
		print "Usage: $0 [-l | -r | <dir-num> ]
Use $0 -l or completion to see possible directories."
		return 1
	fi
	chpwd_recent_filehandler
	if [[ $PWD != $reply[1] ]]
	then
		chpwd_recent_add $PWD && chpwd_recent_filehandler $reply
	fi
	if (( edit ))
	then
		local compcontext='directories:directory:_path_files -/'
		IFS='
' vared reply || return 1
		chpwd_recent_filehandler $reply
	fi
	[[ $reply[1] = $PWD ]] && reply=($reply[2,-1]) 
	if (( list ))
	then
		dirs=($reply) 
		for ((i = 1; i <= ${#dirs}; i++ )) do
			print -n ${(r.5.)i}
			print -r ${(D)dirs[i]}
		done
		return
	fi
	(( set_reply || edit )) && return
        if [[ $1 == <-> ]]
        then
                if (( $1 > ${#reply} ))
                then
                        print "Not enough directories ($(( ${#dirs} - 1)) possibilities)" >&2
                        return 1
                fi
                dir=${reply[$1]} 
        else
		local rd
		dirs=($reply) 
		for ((i = 1; i <= ${#dirs}; i++ )) do
		    	rd=$reply[$i]
		    	if (( grep ))
			then
			    	if [[ $rd =~ $1 ]]
				then
				    	dir=$rd
					break
				fi
			elif [[ ${rd:t} == $1 ]]
			then
				dir=$rd
				break
			fi
		done
		if [[ -z $dir ]]
		then
			print "Cannot find named dir: $1" >& 2
			return 1
		fi
        fi
	if zstyle -t ':chpwd:' recent-dirs-pushd
	then
		pushd -- $dir
	else
		cd -- $dir
	fi
}

# My addition to cdr: Does a pushd equivalent this time
pdr() {
	emulate -L zsh
        if zstyle -t ':chpwd:' recent-dirs-pushd
        then
                cdr "$@"
        else
                local x
                zstyle -s ':chpwd:' recent-dirs-pushd x
                zstyle ':chpwd:' recent-dirs-pushd "true"
                cdr "$@"
                zstyle ':chpwd:' recent-dirs-pushd "$x"
        fi
}

# Restore previous dir and g4 status when logging in again.
# The directory ~/.zsh_hist must exist or nothing will be done
func zshhist_path() {
	local f
	if [[ $LC_TTY == "" ]]; then return; fi
	f=~/.zsh_hist/${LC_TTY:gs,/,_}
	f=${f:s,/_,/}
	echo $f
}

func zshhist_store() {
	local f
	f=`zshhist_path`
	if [[ $f == "" ]]; then return; fi
	if [[ ! -d ~/.zsh_hist ]]; then return; fi
	(
	    [[ $d != "" ]] && echo g4dir $t/$d
	    local -a dirs
	    dirs=(`dirs`)
	    local dircmd=cd
	    for (( i = $#dirs; i > 0; i-- )) do
		local dir=$dirs[$i]
		echo $dircmd "$dir"
		dircmd=pushd
	    done
	    echo echo dirs: \`dirs\`
	) >! $f
}
precmd_functions+=(zshhist_store)

func zshhist_restore() {
	local f
	f=`zshhist_path`
	if [[ $f == "" ]]; then return; fi
	[[ -f $f ]] && . $f
	HISTFILE=$f.hist
}

export LC_TTY=${LC_TTY:-`tty`}

[[ -z "$XAUTHORITY" && -f ~/.Xauthority ]] && export XAUTHORITY=~/.Xauthority

domain_source zshrc

. $HOME/.bagpipe/setup.sh $HOME/.bagpipe shamus.mtv

test -f ~/.bagpipe/setup.sh && . ~/.bagpipe/setup.sh ~/.bagpipe shamus.mtv
